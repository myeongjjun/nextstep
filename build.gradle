plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.14'
}

group = 'me.myjju'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
bootJar.enabled = false

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


test {
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.7'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
//        rule {
//            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
//            limit {
//                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
//                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
//                minimum = 0.30
//            }
//        }

        rule {
            // 룰을 간단히 켜고 끌 수 있다.
            enabled = false

            // 룰을 체크할 단위는 클래스 단위
            element = 'CLASS'

            // 브랜치 커버리지를 최소한 90% 만족시켜야 한다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 한다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
//              maximum = 8
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
//                    '*.test.*',
//                    '*.Kotlin*'
            ]
        }
    }
}

